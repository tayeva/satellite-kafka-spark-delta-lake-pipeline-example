// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_EVENT_EVENT_H_
#define FLATBUFFERS_GENERATED_EVENT_EVENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
                  FLATBUFFERS_VERSION_MINOR == 5 &&
                  FLATBUFFERS_VERSION_REVISION == 26,
              "Non-compatible flatbuffers version included");

namespace event {

struct Event;
struct EventBuilder;

struct Event FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SATELLITE_NAME = 4,
    VT_TIMESTAMP_NS = 6,
    VT_TEMP_C = 8,
    VT_BATTERY_CHARGE_PCT = 10,
    VT_ALTITUDE_KM = 12,
    VT_SENSOR1 = 14,
    VT_SENSOR2 = 16,
    VT_SENSOR3 = 18
  };
  const ::flatbuffers::String *satellite_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SATELLITE_NAME);
  }
  uint64_t timestamp_ns() const {
    return GetField<uint64_t>(VT_TIMESTAMP_NS, 0);
  }
  double temp_c() const { return GetField<double>(VT_TEMP_C, 0.0); }
  double battery_charge_pct() const {
    return GetField<double>(VT_BATTERY_CHARGE_PCT, 0.0);
  }
  double altitude_km() const { return GetField<double>(VT_ALTITUDE_KM, 0.0); }
  double sensor1() const { return GetField<double>(VT_SENSOR1, 0.0); }
  double sensor2() const { return GetField<double>(VT_SENSOR2, 0.0); }
  double sensor3() const { return GetField<double>(VT_SENSOR3, 0.0); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SATELLITE_NAME) &&
           verifier.VerifyString(satellite_name()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP_NS, 8) &&
           VerifyField<double>(verifier, VT_TEMP_C, 8) &&
           VerifyField<double>(verifier, VT_BATTERY_CHARGE_PCT, 8) &&
           VerifyField<double>(verifier, VT_ALTITUDE_KM, 8) &&
           VerifyField<double>(verifier, VT_SENSOR1, 8) &&
           VerifyField<double>(verifier, VT_SENSOR2, 8) &&
           VerifyField<double>(verifier, VT_SENSOR3, 8) && verifier.EndTable();
  }
};

struct EventBuilder {
  typedef Event Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_satellite_name(
      ::flatbuffers::Offset<::flatbuffers::String> satellite_name) {
    fbb_.AddOffset(Event::VT_SATELLITE_NAME, satellite_name);
  }
  void add_timestamp_ns(uint64_t timestamp_ns) {
    fbb_.AddElement<uint64_t>(Event::VT_TIMESTAMP_NS, timestamp_ns, 0);
  }
  void add_temp_c(double temp_c) {
    fbb_.AddElement<double>(Event::VT_TEMP_C, temp_c, 0.0);
  }
  void add_battery_charge_pct(double battery_charge_pct) {
    fbb_.AddElement<double>(Event::VT_BATTERY_CHARGE_PCT, battery_charge_pct,
                            0.0);
  }
  void add_altitude_km(double altitude_km) {
    fbb_.AddElement<double>(Event::VT_ALTITUDE_KM, altitude_km, 0.0);
  }
  void add_sensor1(double sensor1) {
    fbb_.AddElement<double>(Event::VT_SENSOR1, sensor1, 0.0);
  }
  void add_sensor2(double sensor2) {
    fbb_.AddElement<double>(Event::VT_SENSOR2, sensor2, 0.0);
  }
  void add_sensor3(double sensor3) {
    fbb_.AddElement<double>(Event::VT_SENSOR3, sensor3, 0.0);
  }
  explicit EventBuilder(::flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Event> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Event>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Event>
CreateEvent(::flatbuffers::FlatBufferBuilder &_fbb,
            ::flatbuffers::Offset<::flatbuffers::String> satellite_name = 0,
            uint64_t timestamp_ns = 0, double temp_c = 0.0,
            double battery_charge_pct = 0.0, double altitude_km = 0.0,
            double sensor1 = 0.0, double sensor2 = 0.0, double sensor3 = 0.0) {
  EventBuilder builder_(_fbb);
  builder_.add_sensor3(sensor3);
  builder_.add_sensor2(sensor2);
  builder_.add_sensor1(sensor1);
  builder_.add_altitude_km(altitude_km);
  builder_.add_battery_charge_pct(battery_charge_pct);
  builder_.add_temp_c(temp_c);
  builder_.add_timestamp_ns(timestamp_ns);
  builder_.add_satellite_name(satellite_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Event>
CreateEventDirect(::flatbuffers::FlatBufferBuilder &_fbb,
                  const char *satellite_name = nullptr,
                  uint64_t timestamp_ns = 0, double temp_c = 0.0,
                  double battery_charge_pct = 0.0, double altitude_km = 0.0,
                  double sensor1 = 0.0, double sensor2 = 0.0,
                  double sensor3 = 0.0) {
  auto satellite_name__ =
      satellite_name ? _fbb.CreateString(satellite_name) : 0;
  return event::CreateEvent(_fbb, satellite_name__, timestamp_ns, temp_c,
                            battery_charge_pct, altitude_km, sensor1, sensor2,
                            sensor3);
}

inline const event::Event *GetEvent(const void *buf) {
  return ::flatbuffers::GetRoot<event::Event>(buf);
}

inline const event::Event *GetSizePrefixedEvent(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<event::Event>(buf);
}

inline bool VerifyEventBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<event::Event>(nullptr);
}

inline bool VerifySizePrefixedEventBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<event::Event>(nullptr);
}

inline void FinishEventBuffer(::flatbuffers::FlatBufferBuilder &fbb,
                              ::flatbuffers::Offset<event::Event> root) {
  fbb.Finish(root);
}

inline void
FinishSizePrefixedEventBuffer(::flatbuffers::FlatBufferBuilder &fbb,
                              ::flatbuffers::Offset<event::Event> root) {
  fbb.FinishSizePrefixed(root);
}

} // namespace event

#endif // FLATBUFFERS_GENERATED_EVENT_EVENT_H_
